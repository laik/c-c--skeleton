IF (DEFINED VERNUMBER)
    SET(APP_VER_NUMBER ${VERNUMBER})
ELSE ()
    SET(APP_VER_NUMBER "1.0.0.0.alpha")
ENDIF ()

IF (DEFINED VERCOMPATIBLE)
    SET(APP_VER_COMPATIBLE ${VERCOMPATIBLE})
ELSE ()
    SET(APP_VER_COMPATIBLE "1.0.0.0")
ENDIF ()

IF (APP_PRODUCT_NAME)
    ADD_DEFINITIONS(-DAPP_PRODUCT_NAME="${APP_PRODUCT_NAME}")
ENDIF ()

find_program(HAVE_GIT NAMES git)

IF (DEFINED GITINFO)
    SET(APP_VER_GIT ${GITINFO})
ELSEIF (HAVE_GIT)
    execute_process(COMMAND git log -1 --format=%H
            WORKING_DIRECTORY ${APP_SOURCE_DIR}
            OUTPUT_VARIABLE GIT_COMMITID
    )
    message(STATUS "git log result:${GIT_COMMITID}")
    IF (GIT_COMMITID)
        string(REGEX REPLACE "[\n\t\r]" "" GIT_COMMITID ${GIT_COMMITID})
        SET(APP_VER_GIT ${GIT_COMMITID})
    ELSE ()
        message(STATUS "not a git repository")
        SET(APP_VER_GIT "no git commit id")
    ENDIF ()
ELSE ()
    message(STATUS "no git found")
    SET(APP_VER_GIT "no git commit id")
ENDIF ()

IF (DEFINED VERDATE)
    SET(APP_VER_DATE ${VERDATE})
ELSE ()
    STRING(COMPARE GREATER_EQUAL "${CMAKE_VERSION}" "3.26" APP_CMAKE_SUPPORT_TZ)

    IF (APP_CMAKE_SUPPORT_TZ)
        STRING(TIMESTAMP APP_VER_DATE "%Y-%m-%d %H:%M:%S %z")
    ELSE ()
        IF (APP_WINDOWS)
            STRING(TIMESTAMP APP_VER_DATE "%Y-%m-%d %H:%M:%S")
        ELSE ()
            EXECUTE_PROCESS(COMMAND date +"%F %T %z" OUTPUT_VARIABLE APP_VER_DATE)
            STRING(REPLACE "\"" "" APP_VER_DATE ${APP_VER_DATE})
            STRING(STRIP ${APP_VER_DATE} APP_VER_DATE)
        ENDIF ()
    ENDIF ()
ENDIF ()

IF (DEFINED VERTYPE)
    SET(APP_VER_VERTYPE ${VERTYPE})
ELSE ()
    SET(APP_VER_VERTYPE "stable")
ENDIF ()

IF (DEFINED CPUTYPE)
    SET(APP_VER_CPUTYPE ${CPUTYPE})
ELSE ()
    IF (APP_WINDOWS_32)
        SET(APP_VER_CPUTYPE "x86")
    ELSEIF (APP_LINUX_32)
        SET(APP_VER_CPUTYPE "x86")
    ELSEIF (APP_ARM_32)
        SET(APP_VER_CPUTYPE "arm32")
    ELSEIF (APP_MIPS_32)
        SET(APP_VER_CPUTYPE "mips32")
    ELSE ()
        SET(APP_VER_CPUTYPE "x64")
    ENDIF ()
ENDIF ()

IF (DEFINED OSTYPE)
    SET(APP_VER_OSTYPE ${OSTYPE})
ELSE ()
    SET(APP_VER_OSTYPE ${CMAKE_SYSTEM_NAME})
ENDIF ()

MESSAGE(STATUS "============= compile version parameter information start ============= ")
MESSAGE(STATUS "version:    " ${APP_VER_NUMBER})
MESSAGE(STATUS "compatible: " ${APP_VER_COMPATIBLE})
MESSAGE(STATUS "commit id:  " ${APP_VER_GIT})
MESSAGE(STATUS "build date: " ${APP_VER_DATE})
MESSAGE(STATUS "build type: " ${CMAKE_BUILD_TYPE})
MESSAGE(STATUS "type:       " ${APP_VER_VERTYPE})
MESSAGE(STATUS "cpu:        " ${APP_VER_CPUTYPE})
MESSAGE(STATUS "os:         " ${APP_VER_OSTYPE})
MESSAGE(STATUS "============= compile version parameter information end  ============= ")

STRING(REPLACE "." "_" APP_LIB_VER_NUMBER ${APP_VER_NUMBER})
